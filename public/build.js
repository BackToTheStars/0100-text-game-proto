/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _script_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./script.js */ \"./src/script.js\");\n/* harmony import */ var _toRefactor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toRefactor.js */ \"./src/toRefactor.js\");\n\r\n\r\n\r\n\r\n/** Client code */\r\n\r\nlet gameBox = document.getElementById(\"gameBox\"); // выбирает элемент по id\r\nlet gameTurns = [];\r\nlet lineInfoEls = [];\r\n(0,_script_js__WEBPACK_IMPORTED_MODULE_0__.getLinesSettings)(function (data) {\r\n    lineInfoEls = data\r\n});\r\nlet classesPanelSettings = (0,_script_js__WEBPACK_IMPORTED_MODULE_0__.getPanelSettings)();\r\nlet linkLineWidth = 2;\r\nlet newLineInfoEl = {\r\n    sourceTurnId: null,\r\n    sourceMarker: null,\r\n    targetTurnId: null,\r\n    targetMarker: null,\r\n}\r\nlet frontLinesFlag = true;\r\nlet quotesDictionary = {};\r\nlet authorDictionary = {};\r\n\r\nconst setSizes = (jQueryElement) => {\r\n    $(jQueryElement).css('height', $(jQueryElement).height() + 'px');\r\n    $(jQueryElement).css('width', $(jQueryElement).width() + 'px');\r\n}\r\n\r\nconst getLine = (gameBox, x1, y1, x2, y2) => {\r\n    return `<line x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" stroke=\"red\" stroke-width=\"${linkLineWidth}\" />`;\r\n}\r\n\r\nconst getMarkerCoords = (turnId, markerPos) => {  // берём координаты жёлтых цитат\r\n    const element = $(`[data-id = \"${turnId}\"]`);\r\n    const markerEls = element.find(\".paragraphText span\").toArray().filter(spanEl => {\r\n        return $(spanEl).css('background-color') === \"rgb(255, 255, 0)\";\r\n    });\r\n    return {\r\n        left: $(markerEls[markerPos]).offset()['left'],\r\n        top: $(markerEls[markerPos]).offset()['top'],\r\n        width: $(markerEls[markerPos]).width(),\r\n        height: $(markerEls[markerPos]).height(),\r\n    }\r\n}\r\n\r\nconst getYellowElements = (turnId) => {\r\n    const element = $(`[data-id = \"${turnId}\"]`);\r\n    return element.find(\".paragraphText span\").toArray().filter(spanEl => {\r\n        return $(spanEl).css('background-color') === \"rgb(255, 255, 0)\";\r\n    });\r\n}\r\n\r\nconst getYellowElement = (turnId, markerId) => {\r\n    const elements = getYellowElements(turnId);\r\n    return elements[markerId];\r\n}\r\n\r\nconst markYellowElementsWithRed = (lineInfoEls) => {\r\n    $('.red-link-line').removeClass('red-link-line')\r\n    for (let lineInfoEl of lineInfoEls) {\r\n        const leftEl = getYellowElement(lineInfoEl.sourceTurnId, lineInfoEl.sourceMarker);\r\n        $(leftEl).addClass('red-link-line');\r\n        const rightEl = getYellowElement(lineInfoEl.targetTurnId, lineInfoEl.targetMarker);\r\n        $(rightEl).addClass('red-link-line');\r\n    }\r\n}\r\n\r\nfunction deleteLink() {  // удаляет линию связи между жёлтами цитатами\r\n    console.log();\r\n}\r\n\r\nfunction showLinesInfoPanel(quote, quoteLines) {  // показывает информацию, что связано с этой цитатой\r\n    const panelEl = $('.link-lines-info');\r\n    panelEl.html(`<table>\r\n        <thead>\r\n            <tr><th>from</th><th>to</th><th>actions</th></tr>\r\n        </thead>\r\n        <tbody>\r\n            ${quoteLines.map((el) => {\r\n        return `<tr\r\n            class=\"link-line-details\"\r\n            data-sourceTurnId=\"${el.sourceTurnId}\"\r\n            data-sourceMarker=\"${el.sourceMarker}\"\r\n            data-targetTurnId=\"${el.targetTurnId}\"\r\n            data-targetMarker=\"${el.targetMarker}\"\r\n        >\r\n            <td>${quotesDictionary[el.sourceTurnId][el.sourceMarker]}</td>\r\n            <td>${quotesDictionary[el.targetTurnId][el.targetMarker]}</td>\r\n            <td>\r\n                <button class=\"del-btn\">Delete</button>\r\n            </td>\r\n        </tr>`\r\n    }).join('')}\r\n        </tbody>\r\n    </table>`)\r\n};\r\n\r\n$('.link-lines-info').on('click', '.del-btn', function () {\r\n\r\n    const linkLineDetailsEl = $(this).parents('.link-line-details');\r\n    const sourceTurnId = linkLineDetailsEl.attr('data-sourceTurnId');\r\n    const sourceMarker = linkLineDetailsEl.attr('data-sourceMarker');\r\n    const targetTurnId = linkLineDetailsEl.attr('data-targetTurnId');\r\n    const targetMarker = linkLineDetailsEl.attr('data-targetMarker');\r\n    lineInfoEls = lineInfoEls.filter((el) => {\r\n        if (el.sourceTurnId != sourceTurnId ||\r\n            el.sourceMarker != sourceMarker ||\r\n            el.targetTurnId != targetTurnId ||\r\n            el.targetMarker != targetMarker) {\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    saveLinesSettings(lineInfoEls);\r\n    markYellowElementsWithRed(lineInfoEls);\r\n    drawLinesByEls(lineInfoEls, frontLinesFlag);\r\n    linkLineDetailsEl.remove();\r\n})\r\n\r\n// получение справочника авторов\r\nsetTimeout(() => {\r\n    authorDictionary = {\r\n        '123': {\r\n            _id: '123',\r\n            name: 'Teacher'\r\n        },\r\n        '2': {\r\n            _id: '2',\r\n            name: 'Student'\r\n        }\r\n    }\r\n}, 500)\r\n\r\ngetTurns((data) => {    // Запрашиваем ходы с сервера и размещаем их на доске игры\r\n    gameTurns = data;\r\n    quotesDictionary = {};\r\n\r\n    for (let elem of data) {\r\n        quotesDictionary[elem._id] = [];\r\n        let newDiv = (0,_script_js__WEBPACK_IMPORTED_MODULE_0__.makeNewBoxMessage)({\r\n            turn: elem,\r\n            data: elem\r\n        },\r\n        authorDictionary\r\n            /*          elem.header,\r\n                        elem.paragraph,\r\n                        elem._id,\r\n                        elem.x,\r\n                        elem.y,\r\n                        elem.height,\r\n                        elem.width,\r\n                        elem.scrollPosition\r\n                        */\r\n        );\r\n        gameBox.appendChild(newDiv); // само добавление div-ов ходов\r\n\r\n        newDiv.querySelector(\".paragraphText\").scrollTop = elem.scrollPosition;\r\n\r\n        getYellowElements(elem._id).forEach((el, index) => {\r\n\r\n            quotesDictionary[elem._id].push($(el).text().trim())\r\n\r\n            $(el).click((event) => {\r\n                $(el).addClass('red-link-line');\r\n                if (!newLineInfoEl.sourceTurnId) {\r\n                    newLineInfoEl.sourceTurnId = elem._id;\r\n                    newLineInfoEl.sourceMarker = index;\r\n                } else {\r\n                    newLineInfoEl.targetTurnId = elem._id;\r\n                    newLineInfoEl.targetMarker = index;\r\n                    lineInfoEls.push(newLineInfoEl);\r\n                    saveLinesSettings(lineInfoEls);\r\n                    markYellowElementsWithRed(lineInfoEls);\r\n\r\n                    newLineInfoEl = {   // reset \r\n                        sourceTurnId: null,\r\n                        sourceMarker: null,\r\n                        targetTurnId: null,\r\n                        targetMarker: null,\r\n                    }\r\n                    drawLinesByEls(lineInfoEls, frontLinesFlag);\r\n                }\r\n\r\n                const selectedQuote = lineInfoEls.filter((element) => {\r\n                    return (element.sourceTurnId === elem._id && element.sourceMarker === index)\r\n                        || (element.targetTurnId === elem._id && element.targetMarker === index);\r\n                });\r\n\r\n                showLinesInfoPanel({ turnId: elem._id, markerId: index }, selectedQuote);\r\n            })\r\n        });\r\n    }\r\n    $('.textBox').resizable();\r\n    $('.textBox').draggable({\r\n        stop: function (event, ui) {\r\n            // saveFieldSettings({\r\n            //     left: ui.position.left,\r\n            //     top: ui.position.top,\r\n            //     height: 1000,\r\n            //     width: 1000,\r\n            // })\r\n            // game.recalculate();\r\n            drawLinesByEls(lineInfoEls, frontLinesFlag);\r\n        }\r\n    });\r\n    $(\".paragraphText\").scroll(function (e) {\r\n        // определить скрытые маркеры\r\n        drawLinesByEls(lineInfoEls, frontLinesFlag);\r\n    });\r\n\r\n    // отрисовка линий\r\n    // получение координат\r\n    // lineInfoEls = [\r\n    //     {\r\n    //     sourceTurnId: '5f602d2f84471e68ecccde35',\r\n    //     sourceMarker: 0,\r\n    //     targetTurnId: '5f602dd884471e68ecccde36',\r\n    //     targetMarker: 0,\r\n    // }\r\n    // ]\r\n\r\n    // @todo: Проверить, что массив lineInfoEls загружен\r\n    drawLinesByEls(lineInfoEls, frontLinesFlag);\r\n    markYellowElementsWithRed(lineInfoEls);\r\n\r\n    // Проверка, все ли картинки загрузились, чтобы корректно отрисовать линии связей - №30\r\n    const images = $(\"img\");\r\n    let counter = images.length;\r\n    images.toArray().forEach((el) => {\r\n        if ($(el).get(0).complete) {\r\n            counter = counter - 1;\r\n        } else {\r\n            $(el).one(\"load\", () => {\r\n                counter = counter - 1;\r\n                //      console.log(counter); // можно сделать Progress Bar\r\n                if (counter === 0) {\r\n                    drawLinesByEls(lineInfoEls, frontLinesFlag);\r\n                }\r\n            })\r\n        }\r\n    });\r\n});\r\n\r\nfunction selectChanged() {\r\n    const pw = document.getElementById('params-wrapper');\r\n    switch (document.getElementById('turnType').value) {\r\n        case 'picture': {\r\n            pw.innerHTML = 'Image URL: <input id=\"input-image-url\" type=\"text\" />'\r\n            pw.style.display = 'block';\r\n            break;\r\n        }\r\n        case 'video': {\r\n            pw.innerHTML = 'Video URL: <input id=\"input-video-url\" type=\"text\" />' /* +\r\n                            '<br>Begin time: <input id=\"input-video-begin-time\" type=\"text\" placeholder=\"0:00:00\" onchange=\"inputTimeOnChange\" />' +\r\n                            '<br>End time: <input id=\"input-video-end-time\" type=\"text\" placeholder=\"0:00:00\" onchange=\"inputTimeOnChange\" />'\r\n                            */\r\n            pw.style.display = 'block';\r\n            break;\r\n        }\r\n        default: {\r\n            pw.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawLinesByEls(lineInfoEls, frontFlag = false) {\r\n    // функция рисования красной линии логической связи из точки \"А\" в точку \"Б\" \r\n    let linesStr = '';\r\n    for (let lineInfo of lineInfoEls) {\r\n        const sourceMarkerEl = getYellowElement(lineInfo.sourceTurnId, lineInfo.sourceMarker);\r\n        if (!isMarkerVisible($(sourceMarkerEl))) {\r\n            continue;\r\n        }\r\n        const targetMarkerEl = getYellowElement(lineInfo.targetTurnId, lineInfo.targetMarker);\r\n        if (!isMarkerVisible($(targetMarkerEl))) {\r\n            continue;\r\n        }\r\n\r\n        const sourceCoords = getMarkerCoords(lineInfo.sourceTurnId, lineInfo.sourceMarker);\r\n        const targetCoords = getMarkerCoords(lineInfo.targetTurnId, lineInfo.targetMarker);\r\n        const sideBarWidth = $(\"#classMenu\").width(); // + 45;\r\n\r\n        // фрагмент 3\r\n\r\n        const sourceFirst = sourceCoords.left < targetCoords.left;\r\n        const line = {\r\n            x1: sourceCoords.left + (sourceFirst ? sourceCoords.width : 0) - sideBarWidth + (sourceFirst ? 4 : -4), // + 3,\r\n            y1: sourceCoords.top + Math.floor(sourceCoords.height / 2),\r\n            x2: targetCoords.left + (sourceFirst ? 0 : targetCoords.width) - sideBarWidth + (sourceFirst ? -4 : 4), // - 5,\r\n            y2: targetCoords.top + Math.floor(targetCoords.height / 2),\r\n        }\r\n        // отрисовка координат\r\n        linesStr += getLine(gameBox, line.x1, line.y1, line.x2, line.y2)\r\n    }\r\n    if ($(\"#lines\").length) {\r\n        $(\"#lines\").remove();\r\n    }\r\n    const svg = $(`<svg viewBox=\"0 0 ${$(\"#gameBox\").width()} ${$(\"#gameBox\").height()}\" xmlns=\"http://www.w3.org/2000/svg\" id=\"lines\">\r\n    ${linesStr}\r\n  </svg>`);\r\n    if (frontFlag) {\r\n        svg.addClass('front-elements');\r\n    }\r\n    $(gameBox).append(svg);\r\n}\r\n\r\nfunction buttonSavePositions(e) {  // функция сохранения поля\r\n    // e.preventDefault();\r\n    const textBoxes = document.querySelectorAll(\".textBox\");\r\n    const payload = [];\r\n    for (let textBox of textBoxes) {\r\n        //console.log(textBox.children[0].innerText);\r\n        const x = parseInt(textBox.style.left) || 0;\r\n        const y = parseInt(textBox.style.top) || 0;\r\n        const height = parseInt(textBox.style.height);\r\n        const width = parseInt(textBox.style.width);\r\n        const { id, contentType } = textBox.dataset;\r\n        const scrollPosition = textBox.querySelector(\".paragraphText\").scrollTop;     // bug \r\n        // console.log(scrollPosition); \r\n        payload.push({ x, y, height, width, id, contentType, scrollPosition });\r\n    }\r\n    turnsUpdateCoordinates(payload, function () {\r\n        console.log(\"Positions of all turns re-saved.\");\r\n    });\r\n};\r\n\r\n\r\nconst getGame = (gameBox, fieldSettings) => {\r\n    const render = () => {                                    // инкапсуляция переменных\r\n        gameBox.style.left = fieldSettings.left + 'px';\r\n        gameBox.style.top = fieldSettings.top + 'px';\r\n    }\r\n\r\n    const recalculate = () => {\r\n        // найти textboxes\r\n        const textBoxElements = document.querySelectorAll('.textBox')\r\n        const left = parseInt(gameBox.style.left);\r\n        const top = parseInt(gameBox.style.top);\r\n        // пересчитать настройки\r\n        for (let textBoxElement of textBoxElements) {\r\n            textBoxElement.style.left = parseInt(textBoxElement.style.left) + left + 'px';\r\n            textBoxElement.style.top = parseInt(textBoxElement.style.top) + top + 'px';\r\n        }\r\n        gameBox.style.left = 0;\r\n        gameBox.style.top = 0;\r\n        saveFieldSettings({\r\n            left: 0,\r\n            top: 0\r\n        })\r\n    }\r\n    return {\r\n        recalculate: recalculate,         // возвращаем две верёвки методов, можем за них дёргать\r\n        render: render\r\n    }\r\n}\r\n\r\nfunction isMarkerVisible(jqElement) {   // элементы отбрасывают \"тень\", иметь ввиду для дальнейших видов контента! \r\n    // if(jqElement.parents('[data-content-type=\"picture\"]').length) {\r\n    //     debugger;\r\n    // }\r\n    if (!jqElement.length) {\r\n        console.log(\"Попытка обратиться к несуществующему jquery элементу\");\r\n        return false;\r\n    }\r\n    const top = jqElement.position()['top'];\r\n    const height = jqElement.height();\r\n    const paragraphHeight = jqElement.parents(\".paragraphText\").height();\r\n    const headerHeight = jqElement\r\n        .parents(\".textBox\")\r\n        .find(\".headerText\")\r\n        .height() || 0;\r\n    const pictureHeight = jqElement\r\n        .parents(\".textBox\")\r\n        .find(\".picture-content\")\r\n        .height() || 0;\r\n    const iFrameHeight = jqElement\r\n        .parents(\".textBox\")\r\n        .find(\".video\")\r\n        .height() || 0;\r\n\r\n    if (top + height < headerHeight + pictureHeight + iFrameHeight) {\r\n        return false;\r\n    }\r\n    if (top > headerHeight + paragraphHeight + pictureHeight + iFrameHeight) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n// **** КЛИЕНТСКИЙ КОД  ****/\r\n\r\n\r\nif (classesPanelSettings.visible) {\r\n    $(\"#classMenu\").removeClass(\"hidden\");\r\n}\r\nconst fieldSettings = (0,_script_js__WEBPACK_IMPORTED_MODULE_0__.getFieldSettings)();\r\nconst game = getGame(gameBox, fieldSettings);\r\ngame.render();\r\n\r\n$('#gameBox').draggable({\r\n    stop: function (event, ui) {\r\n        saveFieldSettings({\r\n            left: ui.position.left,\r\n            top: ui.position.top,\r\n            height: 1000,\r\n            width: 1000,\r\n        })\r\n        game.recalculate();\r\n        drawLinesByEls(lineInfoEls, frontLinesFlag);\r\n    }\r\n});\r\n\r\n$(\"#move-scroll-btn\").click(e => {\r\n  (0,_toRefactor_js__WEBPACK_IMPORTED_MODULE_1__.toggleLinesZIndex)(() => {\r\n    frontLinesFlag = !frontLinesFlag;\r\n  })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://0100-text-game-proto/./src/index.js?");

/***/ }),

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/*! namespace exports */
/*! export addNewBoxToGame [provided] [no usage info] [missing usage info prevents renaming] */
/*! export addNewClass [provided] [no usage info] [missing usage info prevents renaming] */
/*! export addTextToParagraph [provided] [no usage info] [missing usage info prevents renaming] */
/*! export createClassField [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getFieldSettings [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getInputValue [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getLinesSettings [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getPanelSettings [provided] [no usage info] [missing usage info prevents renaming] */
/*! export insertNewClass [provided] [no usage info] [missing usage info prevents renaming] */
/*! export insertNewClassElement [provided] [no usage info] [missing usage info prevents renaming] */
/*! export makeDeleteButton [provided] [no usage info] [missing usage info prevents renaming] */
/*! export makeEditButton [provided] [no usage info] [missing usage info prevents renaming] */
/*! export makeHead [provided] [no usage info] [missing usage info prevents renaming] */
/*! export makeNewBoxMessage [provided] [no usage info] [missing usage info prevents renaming] */
/*! export makeParagraph [provided] [no usage info] [missing usage info prevents renaming] */
/*! export saveFieldSettings [provided] [no usage info] [missing usage info prevents renaming] */
/*! export saveLinesSettings [provided] [no usage info] [missing usage info prevents renaming] */
/*! export savePanelSettings [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getInputValue\": () => /* binding */ getInputValue,\n/* harmony export */   \"addNewBoxToGame\": () => /* binding */ addNewBoxToGame,\n/* harmony export */   \"addTextToParagraph\": () => /* binding */ addTextToParagraph,\n/* harmony export */   \"makeParagraph\": () => /* binding */ makeParagraph,\n/* harmony export */   \"makeHead\": () => /* binding */ makeHead,\n/* harmony export */   \"makeEditButton\": () => /* binding */ makeEditButton,\n/* harmony export */   \"makeDeleteButton\": () => /* binding */ makeDeleteButton,\n/* harmony export */   \"makeNewBoxMessage\": () => /* binding */ makeNewBoxMessage,\n/* harmony export */   \"addNewClass\": () => /* binding */ addNewClass,\n/* harmony export */   \"createClassField\": () => /* binding */ createClassField,\n/* harmony export */   \"insertNewClass\": () => /* binding */ insertNewClass,\n/* harmony export */   \"insertNewClassElement\": () => /* binding */ insertNewClassElement,\n/* harmony export */   \"saveFieldSettings\": () => /* binding */ saveFieldSettings,\n/* harmony export */   \"getFieldSettings\": () => /* binding */ getFieldSettings,\n/* harmony export */   \"savePanelSettings\": () => /* binding */ savePanelSettings,\n/* harmony export */   \"getPanelSettings\": () => /* binding */ getPanelSettings,\n/* harmony export */   \"saveLinesSettings\": () => /* binding */ saveLinesSettings,\n/* harmony export */   \"getLinesSettings\": () => /* binding */ getLinesSettings\n/* harmony export */ });\nfunction getInputValue(id) {\r\n    // обработчик поля Input\r\n    let input = document.getElementById(id);\r\n    let text = input.value;\r\n    input.value = \"\";\r\n    return text;\r\n}\r\n\r\nfunction addNewBoxToGame() {\r\n    // вставляет новый блок источника на поле\r\n    const header = getInputValue(\"headerText\");\r\n    const par = getInputValue(\"paragraphText\"); // вводит текст параграфа\r\n    const type = getInputValue(\"turnType\");\r\n    //console.log(`turnType: ${type}`);\r\n    const imageUrl = type === 'picture' ? getInputValue(\"input-image-url\") : undefined;\r\n    const videoUrl = type === 'video' ? getInputValue('input-video-url') : undefined;\r\n    //console.log(`videoUrl: ${videoUrl}`);\r\n\r\n    let newTurn = {\r\n        header,\r\n        paragraph: [{ insert: par }],\r\n        contentType: type,\r\n        height: 300,\r\n        width: 400,\r\n        imageUrl,\r\n        videoUrl\r\n    };\r\n    saveTurn(newTurn, (data) => {\r\n        let newDiv = makeNewBoxMessage({ turn: newTurn, data }/*header, par, data._id, data.x, data.y, data.height, data.width*/);\r\n        gameBox.appendChild(newDiv); // добавляет новый div к заданному div\r\n        $(newDiv).resizable({\r\n            create: function (ev, ui) {\r\n                //console.log('create')\r\n            },\r\n            resize: function (ev, ui) {\r\n                //console.log(ui.element)\r\n                //console.log(ui.originalElement)\r\n            }\r\n        });\r\n        $(newDiv).draggable(); //{containment: \"#gameBox\"});\r\n    });\r\n}\r\n\r\nfunction addTextToParagraph(par, text) {\r\n    if (Array.isArray(text)) {\r\n        par.innerHTML = '';\r\n        const innerPar = document.createElement('p');\r\n        // par.innerHTML = text.map((el) => `<span>${el.insert}</span>`).join(\"\");\r\n        for (let textItem of text) {\r\n            const spanEl = document.createElement(\"span\");\r\n            if (textItem.attributes) {\r\n                for (let property of Object.keys(textItem.attributes)) {\r\n                    spanEl.style[property] = textItem.attributes[property];\r\n                }\r\n            }\r\n            spanEl.innerText = textItem.insert;\r\n            innerPar.appendChild(spanEl);\r\n        }\r\n        par.appendChild(innerPar);\r\n    } else {\r\n        par.innerHTML = text;\r\n    }\r\n    return par;\r\n}\r\n\r\nfunction makeParagraph(text) {  // создать <p> класса \"paragraphText\" и записать в него параграф\r\n    let par = document.createElement(\"p\");\r\n    par.className = \"paragraphText\";\r\n    return addTextToParagraph(par, text);\r\n}\r\n\r\nfunction makeHead(text) {       // создать <h5> класса \"headerText\" и записать в него заголовок \r\n    let h = document.createElement(\"h5\");\r\n    h.className = \"headerText\";\r\n    h.innerHTML = text;\r\n    return h;\r\n}\r\n\r\nfunction makeEditButton(turn) {                      // создать кнопку \"Edit turn\"\r\n    let button = document.createElement(\"button\");\r\n    button.innerHTML = \"Edit\";\r\n    button.addEventListener(\"click\", () => {\r\n        openTurnModal(turn);\r\n    });\r\n    return button;\r\n}\r\n\r\nfunction makeDeleteButton(turn) {   // создать кнопку \"Delete turn\"    // refactor with makeEditButton()\r\n    let button = document.createElement('button');\r\n    button.innerHTML = 'Delete';\r\n    button.addEventListener('click', () => {\r\n        if(confirm(\"Точно удалить?\")) {\r\n            deleteTurn(turn);\r\n            const element = document.querySelector(`[data-id = \"${turn._id}\"]`);\r\n            element.remove();\r\n        }\r\n    });\r\n    return button;\r\n}\r\n\r\n\r\nfunction makeNewBoxMessage(obj, authorDictionary) {\r\n\r\n    //console.log(`${JSON.stringify(obj)}`);\r\n    const {\r\n        paragraph,\r\n        height,\r\n        width,\r\n        contentType,\r\n        imageUrl,\r\n        videoUrl,\r\n        author_id,\r\n        sourceUrl,\r\n        date\r\n    } = obj.turn;   // деструктуризатор для хода\r\n    let { header } = obj.turn;\r\n    const { _id, x, y } = obj.data;\r\n    // let param = {\r\n    //     head: header,\r\n    //     par: paragraph,\r\n    // };\r\n    const authorObj = authorDictionary[author_id];\r\n    // создаёт div блока по заданным параметрам\r\n    const elmnt = document.createElement('div');\r\n    elmnt.dataset.id = _id;          // data attribute для div-a\r\n    elmnt.style.left = `${x}px`;\r\n    elmnt.style.top = `${y}px`;\r\n    elmnt.style.height = `${height}px`;\r\n    elmnt.style.width = `${width}px`;\r\n    elmnt.className = 'textBox ui-widget-content';\r\n    // console.log(paragraph);\r\n    const p = makeParagraph(paragraph);\r\n    //p.style.bottom = '100%';\r\n    //p.style.position = 'absolute';\r\n\r\n    if (contentType === \"comment\" && authorObj) { // если комментарий, то добавляем автора в header\r\n        header = authorObj.name + \":\";\r\n    }\r\n    const h = makeHead(header);\r\n    // const editButton = makeEditButton({ _id, paragraph: paragraph, header: header });\r\n    const editButton = makeEditButton(obj.turn);\r\n    const deleteButton = makeDeleteButton({ _id, paragraph: paragraph, header: header });\r\n    h.appendChild(editButton);\r\n    h.appendChild(deleteButton);\r\n\r\n    elmnt.appendChild(h);\r\n\r\n\r\n    elmnt.dataset.contentType = contentType; // data attribute для div-a\r\n    // const bottom\r\n    if(sourceUrl) {\r\n        const leftBottomEl = document.createElement('div');\r\n        leftBottomEl.classList.add('left-bottom-label');\r\n        leftBottomEl.innerText = sourceUrl;\r\n        elmnt.appendChild(leftBottomEl);\r\n    }\r\n\r\n    if(date) {\r\n        const rightBottomEl = document.createElement('div');\r\n        rightBottomEl.classList.add('right-bottom-label');\r\n        rightBottomEl.innerText = new Date(date).toLocaleDateString();\r\n        elmnt.appendChild(rightBottomEl);\r\n    }\r\n\r\n    const wrapper = document.createElement('div');\r\n    wrapper.style.display = 'flex';\r\n    wrapper.style.flexDirection = 'column';   // соглашение, что camelCase = camel-case\r\n    wrapper.style.alignItems = 'center';\r\n    wrapper.style.justifyContent = 'space-between';\r\n    wrapper.style.height = '100%';\r\n    wrapper.style.width = '100%';\r\n\r\n    switch (contentType) {\r\n        case 'picture': {\r\n            \r\n            const img = document.createElement('img');\r\n            img.classList.add('picture-content');\r\n            img.dataset.imgUrl = imageUrl;\r\n            img.style.background = `center / contain no-repeat url(\"${imageUrl}\")`;\r\n            img.src = imageUrl;\r\n            wrapper.appendChild(img);\r\n            wrapper.appendChild(p);\r\n            elmnt.appendChild(wrapper);\r\n            // removed fragment 2 to fragments.js\r\n            break;\r\n        }\r\n        case 'video': {\r\n            //<iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/inBKFMB-yPg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n\r\n            const frame = document.createElement('iframe');\r\n            frame.classList.add(\"video\");\r\n            const m = videoUrl.match(/watch\\?v=/)\r\n            if (m) {\r\n                //console.log('match')\r\n                frame.src = `${videoUrl.substring(0, m.index)}embed/${videoUrl.substring(m.index + 8)}`\r\n            } else {\r\n                // console.log('not match')\r\n                frame.src = videoUrl;\r\n            }\r\n            //frame.style.maxHeight = '100%';\r\n            //frame.style.maxWidth = '100%';\r\n            frame.style.width = '100%';\r\n            frame.style.height = '90%';\r\n            frame.style.top = '0';\r\n            frame.style.left = '0';\r\n            frame.frameborder = '0';\r\n            frame.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture';\r\n            frame.allowfullscreen = true;\r\n            wrapper.appendChild(frame);\r\n            wrapper.appendChild(p);\r\n            elmnt.appendChild(wrapper);\r\n            elmnt.onresize = function (ev) {  // отвечает за корректный масштаб видео от ширины блока\r\n                // console.log(window.getComputedStyle(ev.target).height);\r\n                // console.log(ev.target.children);\r\n                const cs = window.getComputedStyle(ev.target);\r\n                const h = cs.height.slice(0, -2);\r\n                const w = cs.width.slice(0, -2);\r\n                //console.log(h, w);\r\n                ev.target.children[1].children[0].style.height = `${Math.min(h * 0.9, w * 9 / 16)}px`;\r\n            }\r\n            break;\r\n        }\r\n        case 'comment': {\r\n            elmnt.classList.add('comment');\r\n            wrapper.appendChild(p);\r\n            elmnt.appendChild(wrapper);\r\n            break;\r\n        }\r\n\r\n        default: {\r\n            wrapper.appendChild(p);\r\n            elmnt.appendChild(wrapper);\r\n        }\r\n    }\r\n\r\n    /* здесь был \"Фрагмент 1\", сохранён в файле \"фрагменты.js\" */\r\n\r\n    return elmnt;\r\n}\r\n\r\nfunction addNewClass() {\r\n    // создаёт поле нового класса, напр. \"PERSON\"\r\n    let newClassName = getInputValue(\"newClassName\");\r\n    let newClassDiv = createClassField(newClassName);\r\n    insertNewClass(newClassDiv);\r\n}\r\n\r\nfunction createClassField(name) {\r\n    let uniqueInputId = \"classInput\" + name;\r\n    let uniqueUlId = \"classUl\" + name;\r\n    let div = document.createElement(\"div\");\r\n    div.className = \"row\";\r\n    div.innerHTML =\r\n        \"<h5>\" +\r\n        name +\r\n        \"</h5>\" +\r\n        \"<ul id='\" +\r\n        uniqueUlId +\r\n        \"'></ul>\" +\r\n        \"<input id='\" +\r\n        uniqueInputId +\r\n        \"'> \" +\r\n        \"<button onclick='insertNewClassElement(\" +\r\n        uniqueInputId +\r\n        \",\" +\r\n        uniqueUlId +\r\n        \")'>Add Element</button>\";\r\n    return div;\r\n}\r\n\r\nfunction insertNewClass(childClass) {\r\n    let parent = document.getElementById(\"classMenu\");\r\n    parent.appendChild(childClass);\r\n}\r\n\r\nfunction insertNewClassElement(input, ul) {\r\n    let value = input.value;\r\n    input.value = \"\";\r\n    let li = document.createElement(\"li\");\r\n    li.innerHTML = value;\r\n    ul.appendChild(li);\r\n}\r\n\r\nconst saveFieldSettings = (settings) => {\r\n    // left, top,\r\n    // width, height\r\n    localStorage.setItem('gameField', JSON.stringify(settings))\r\n}\r\n\r\nconst getFieldSettings = () => {\r\n    const settings = JSON.parse(localStorage.getItem('gameField')) || {\r\n        left: 0,\r\n        top: 0,\r\n        width: 1000,\r\n        height: 1000\r\n    }\r\n    return settings;\r\n}\r\n\r\nconst savePanelSettings = (panelSettings) => {\r\n    localStorage.setItem('classesPanel', JSON.stringify(panelSettings))\r\n}\r\nconst getPanelSettings = () => {\r\n    const panelSettings = JSON.parse(localStorage.getItem('classesPanel')) || { visible: false };\r\n    return panelSettings;\r\n}\r\n\r\nconst saveLinesSettings = (lineInfoEls) => { // сохраняет lineInfoEls в память браузера\r\n    // localStorage.setItem('linkLines', JSON.stringify(lineInfoEls));\r\n    updateRedLogicLines(lineInfoEls, function () {\r\n        //console.log(\"updateRedLogicLines\")\r\n    })\r\n}\r\n\r\nconst getLinesSettings = (callback) => {\r\n    getRedLogicLines(callback)\r\n    // const lineInfoEls = JSON.parse(localStorage.getItem('linkLines')) || [];\r\n    // return lineInfoEls;\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://0100-text-game-proto/./src/script.js?");

/***/ }),

/***/ "./src/toRefactor.js":
/*!***************************!*\
  !*** ./src/toRefactor.js ***!
  \***************************/
/*! namespace exports */
/*! export toggleLinesZIndex [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toggleLinesZIndex\": () => /* binding */ toggleLinesZIndex\n/* harmony export */ });\nfunction toggleLinesVisibility() {\r\n    // document.querySelector(\"#lines\").style.display = \"none\";\r\n    // document.querySelector(\"#lines\").classList.toggle();\r\n    // $(\"#lines\").css('display', 'none'); // Jquery  \r\n    // $(\"#lines\").hide();\r\n    $(\"#lines\").toggle();    // Jquery\r\n}\r\n\r\nconst toggleLinesZIndex = (callback) => {\r\n    callback();\r\n    $(\"#lines\").toggleClass(\"front-elements\");\r\n}\r\n\r\nfunction toggleLeftClassPanel() {\r\n    $(\"#classMenu\").toggleClass(\"hidden\");\r\n    classesPanelSettings.visible = !classesPanelSettings.visible;\r\n    savePanelSettings(classesPanelSettings);\r\n    drawLinesByEls(lineInfoEls, frontLinesFlag);\r\n}\r\n\r\n\n\n//# sourceURL=webpack://0100-text-game-proto/./src/toRefactor.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/index.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;